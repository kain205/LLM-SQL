# visualize.py

import pandas as pd
import re

def parse_log_line(line: str) -> dict:
    """S·ª≠ d·ª•ng regex ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ch√≠nh t·ª´ m·ªôt d√≤ng log ph·ª©c t·∫°p."""
    
    # 1. Tr√≠ch xu·∫•t c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
    question_match = re.search(r"Question: (.*?)\\n", line)
    question = question_match.group(1).strip() if question_match else "N/A"
    
    # 2. X√°c ƒë·ªãnh lu·ªìng x·ª≠ l√Ω (route) v√† l·∫•y d·ªØ li·ªáu t∆∞∆°ng ·ª©ng
    if "'router': {'sql':" in line:
        route = "‚úÖ SQL"
        
        # === PH·∫¶N S·ª¨A L·ªñI B·∫ÆT ƒê·∫¶U ===
        # Thay ƒë·ªïi regex ƒë·ªÉ l·∫•y SQL t·ª´ v·ªã tr√≠ ƒë√°ng tin c·∫≠y h∆°n trong log
        sql_match = re.search(r"'router': {'sql': \['(.*?)'\]}", line, re.DOTALL)
        
        if sql_match:
            # L·∫•y n·ªôi dung v√† thay th·∫ø k√Ω t·ª± xu·ªëng d√≤ng `\\n` th√†nh `\n` th·∫≠t
            sql_query = sql_match.group(1).strip().replace('\\n', '\n')
        else:
            sql_query = "Kh√¥ng t√¨m th·∫•y SQL."
        # === PH·∫¶N S·ª¨A L·ªñI K·∫æT TH√öC ===

        # Tr√≠ch xu·∫•t c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
        final_answer_match = re.search(r"'llm_explainer'.*?text='(.*?)'", line, re.DOTALL)
        final_answer = final_answer_match.group(1).strip().replace('\\n', '<br>') if final_answer_match else "N/A"

    elif "'router': {'no_answer':" in line:
        route = "‚ùå No Answer"
        sql_query = "N/A"
        
        # Tr√≠ch xu·∫•t l√Ω do kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c
        no_answer_match = re.search(r"'no_answer': '(.*?)'", line)
        final_answer = no_answer_match.group(1).strip() if no_answer_match else "N/A"
        
    else:
        route = "‚ùì Unknown"
        sql_query = "N/A"
        final_answer = "N/A"
        
    return {
        "C√¢u h·ªèi": question,
        "Lu·ªìng x·ª≠ l√Ω": route,
        "SQL ƒë∆∞·ª£c t·∫°o": sql_query,
        "C√¢u tr·∫£ l·ªùi cu·ªëi c√πng": final_answer,
    }

def create_visualization(input_file: str = "logs/results.jsonl", output_file: str = "results_visualization.html"):
    """ƒê·ªçc t·ªáp log, ph√¢n t√≠ch v√† t·∫°o m·ªôt b·∫£ng HTML ƒë·ªÉ tr·ª±c quan h√≥a."""
    records = []
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip(): # B·ªè qua c√°c d√≤ng tr·ªëng
                    records.append(parse_log_line(line))
    except FileNotFoundError:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp '{input_file}'.")
        return

    if not records:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu trong t·ªáp ƒë·ªÉ x·ª≠ l√Ω.")
        return

    # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t
    df = pd.DataFrame(records)

    # ƒê·ªãnh d·∫°ng DataFrame th√†nh HTML ƒë·ªÉ ƒë·∫πp h∆°n
    html_styler = df.style.set_properties(**{
        'text-align': 'left',
        'white-space': 'pre-wrap', # Cho ph√©p xu·ªëng d√≤ng trong √¥
        'border': '1px solid #ddd',
        'padding': '10px'
    }).set_table_styles([
        {'selector': 'th', 'props': [
            ('background-color', '#1E88E5'), 
            ('color', 'white'),
            ('font-weight', 'bold')
        ]},
        {'selector': 'tr:nth-child(even)', 'props': [('background-color', '#f2f2f2')]},
    ]).hide(axis="index") # ·∫®n ch·ªâ s·ªë c·ªôt c·ªßa DataFrame

    # L∆∞u k·∫øt qu·∫£ ra file HTML
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_styler.to_html())
        
    print(f"üöÄ Ho√†n t·∫•t! M·ªü t·ªáp '{output_file}' trong tr√¨nh duy·ªát ƒë·ªÉ xem k·∫øt qu·∫£.")

if __name__ == "__main__":
    create_visualization()